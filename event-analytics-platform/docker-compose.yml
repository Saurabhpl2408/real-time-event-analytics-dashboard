version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - event-analytics

  # Kafka Message Broker
  kafka:
    image: bitnami/kafka:2.8
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper
    networks:
      - event-analytics

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: event_analytics
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_password
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - event-analytics
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d event_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (Alternative message queue - optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - event-analytics

  # Event Ingestion Service
  event-ingestion:
    build: ./services/event-ingestion
    ports:
      - "8001:8001"
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/event_analytics
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - event-analytics

  # Event Validation Service
  event-validation:
    build: ./services/event-validation
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/event_analytics
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - event-analytics

  # Storage Service
  storage-service:
    build: ./services/storage-service
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/event_analytics
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - event-analytics

  # Analytics Service (we'll create this next)
  analytics-service:
    build: ./services/analytics-service
    ports:
      - "8003:8003"
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/event_analytics
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - event-analytics

  # Anomaly Detection Service (we'll create this next)
  anomaly-detection:
    build: ./services/anomaly-detection
    ports:
      - "8004:8004"
    environment:
      KAFKA_BROKER: kafka:9092
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/event_analytics
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - event-analytics

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - event-analytics

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - postgres
    networks:
      - event-analytics

  # pgAdmin for Database Management (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - event-analytics
    profiles:
      - debug  # Only start with: docker-compose --profile debug up

networks:
  event-analytics:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local