services:
  # Redpanda (Kafka-compatible message broker)
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.3
    container_name: redpanda
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=info
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - analytics-network

  # Redis (for real-time storage and pub/sub)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - analytics-network

  # FastAPI Backend (Ingestion + WebSocket)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - KAFKA_TOPIC=events.raw
    depends_on:
      redpanda:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - analytics-network
    volumes:
      - ./backend/app:/app/app

  # Stream Consumer (Kafka -> Redis aggregation)
  consumer:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: consumer
    command: python -m app.consumer
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - KAFKA_TOPIC=events.raw
      - KAFKA_GROUP_ID=analytics-consumer-group
    depends_on:
      redpanda:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - analytics-network
    volumes:
      - ./backend/app:/app/app

  # Event Generator (Test data source)
  event-generator:
    build:
      context: ./event-generator
      dockerfile: Dockerfile
    container_name: event-generator
    environment:
      - BACKEND_URL=http://backend:8000
      - EVENTS_PER_SECOND=10
    depends_on:
      - backend
    networks:
      - analytics-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - analytics-network

networks:
  analytics-network:
    driver: bridge